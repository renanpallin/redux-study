Redux funciona como o Single Source of True, um obj js
Tudo que altera o estado deve passar por ele, não se pode simplesmente permitir que alguém altere o estado, tem que dispsrar uma ação.
O mínimo objeto de ação aceitável é um {type: String}. Não é necessário ser String, mas é recomendado por ser serializável facilmente.
Reducers são as funções que recebem (currentState, action) e retornam o novo estado.
Aparentemente quando se muda apenas uma pequena parte do state, o estado antigo é referenciado através dos outros objetos, tornando redux bem rápido. no caso:
{
	todos: [...],
	filter: 'BY_NAME'
}
para
{
	todos: [...],
	filter: 'BY_COMPLETED'
}
como mudamos apenas o filter, o novo objeto na chave "todos" referencia o "todos" antigo.



Mandameentos:
	classes definem comportamento
	function components são apenas UI




==== Bulding React Applications with Idiomatic Redux:
createStore(reducer[, initialState]) // passe no initial state os dados do servidor, por exemplo

Selectors:::
	- Funções que preparam dados do state para mostrar na UI
	- funções como o getVisibleTodos que filtram o state para montar objetos a serem representados pelos components de UI são chamados de selectors

Dan Abramov (criador do Redux) prefere passar a função de Promise.reject como segundo argumento no Promise.prototype.then em vez de implementar um Promise.prototype.catch porque no cenário then(...).catch(...), caso algo ocorra no tratamento do then, o catch poderá mostrar erros internos para o usuário, e não os que você quer. Passando ambos no then garante que apenas os erros de sua api (ou seja lá de onde veio essa tua promise) serão tratados.
Renan Pallin prefere simplesmente chamar o catch antes do then e ta tudo resolvido.


lembrar de ler daqui a um tempo:
	React:
		- Toda a doc (já pode ler quando tiver tempo)
	Redux:
		- Toda a doc
		- Segundo curso de Adam, criador do Redux